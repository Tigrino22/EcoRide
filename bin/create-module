#!/bin/bash

# Vérifie qu'un nom de module a été fourni
if [ -z "$1" ]; then
    echo "Erreur : aucun nom de module fourni."
    echo "Utilisation : ./bin/create-module nom_du_module"
    exit 1
fi

lcfirst() {
  local str="$1"
  echo "$(echo "${str:0:1}" | tr 'A-Z' 'a-z')${str:1}"
}

# Récupère le nom du module
MODULE_NAME="$1"
MODULE_DIR="src/App/$MODULE_NAME"
CONFIG_DIR="$MODULE_DIR/Config"
CONTROLLER_DIR="$MODULE_DIR/Controller"
ENTITY_DIR="$MODULE_DIR/Entity"
REPOSITORY_DIR="$MODULE_DIR/Repository"
MIDDLEWARE_DIR="$MODULE_DIR/Middleware"
MODULE_FILE="$MODULE_DIR/${MODULE_NAME}Module.php"
ROUTES_FILE="$CONFIG_DIR/Routes.php"
CONTROLLER_FILE="$CONTROLLER_DIR/${MODULE_NAME}Controller.php"

TEMPLATE_DIR="Templates/$MODULE_NAME"
TEMPLATE_FILE="$TEMPLATE_DIR/$MODULE_NAME.html.twig"

# Crée la structure du module
mkdir -p "$MODULE_DIR"
mkdir -p "$CONFIG_DIR"
mkdir -p "$CONTROLLER_DIR"
mkdir -p "$ENTITY_DIR"
mkdir -p "$REPOSITORY_DIR"
mkdir -p "$MIDDLEWARE_DIR"

mkdir -p "$TEMPLATE_DIR"

# Crée le fichier du module avec l'interface ModuleInterface
echo "<?php

namespace Tigrino\\App\\$MODULE_NAME;

use Psr\\Container\\ContainerInterface;
use Tigrino\\Core\\App;
use Tigrino\\Core\\Modules\\ModuleInterface;
use Tigrino\\Core\\Renderer\\RendererInteface;

class ${MODULE_NAME}Module implements ModuleInterface
{
    private App \$app;

    public function __construct(ContainerInterface \$container)
    {
        \$this->app = \$container->get(App::class);
        \$this->app->getRouter()->addRoutes(include __DIR__ . '/Config/Routes.php');

        /** @var RendererInteface \$renderer */
        \$renderer = \$container->get(RendererInteface::class);
        \$renderer->addPath(dirname(__DIR__, 3) . '/Templates/$MODULE_NAME', '$MODULE_NAME');
    }
}
" > "$MODULE_FILE"

# Crée le fichier de configuration des routes
echo "<?php

use Tigrino\\App\\$MODULE_NAME\\Controller\\${MODULE_NAME}Controller;

return [
    [ 'GET', '/$(lcfirst "$MODULE_NAME")', [${MODULE_NAME}Controller::class, 'index'], '$(lcfirst "$MODULE_NAME")', []],
];

" > "$ROUTES_FILE"

# Crée le contrôleur
echo "<?php

namespace Tigrino\\App\\$MODULE_NAME\\Controller;

use GuzzleHttp\\Psr7\\Response;
use Tigrino\\Core\\Controller\\AbstractController;
use Psr\\Http\\Message\\ResponseInterface;

class ${MODULE_NAME}Controller extends AbstractController
{
    public function index(): ResponseInterface
    {
          \$content = \$this->render('@$MODULE_NAME/$MODULE_NAME');

          return new Response(
              200,
              [],
              \$content
          );
    }
}
" > "$CONTROLLER_FILE"

# Création du fichier de template
echo "
{% extends '@__main__/base.html.twig' %}

{% block body %}
<h1>Bienvenue sur le module - $MODULE_NAME</h1>
{% endblock %}
" > "$TEMPLATE_FILE"

# Prépare l'entrée pour le module
MODULE_ENTRY="${MODULE_NAME}Module::class"


# Récupération du chemin absolu du script puis remontant le dossier parent de bin/
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
# Appelle le script PHP pour ajouter le module à ./Config/Modules.php
php $script_dir/add-module.php "$MODULE_ENTRY" "$MODULE_NAME"

echo "Le module '$MODULE_NAME' a été créé avec succès dans le dossier 'src/$MODULE_NAME'."
